import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_compute_network": {
				"default": {
					0: {
						"applied": {
							"auto_create_subnetworks":         false,
							"delete_default_routes_on_create": false,
							"description":                     null,
							"name":                            "foobar",
							"timeouts":                        null,
						},
						"destroy": false,
						"diff": {
							"auto_create_subnetworks": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"delete_default_routes_on_create": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"gateway_ipv4": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"mtu": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "foobar",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"routing_mode": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
				"other": {
					0: {
						"applied": {
							"auto_create_subnetworks":         false,
							"delete_default_routes_on_create": false,
							"description":                     null,
							"name":                            "other",
							"timeouts":                        null,
						},
						"destroy": false,
						"diff": {
							"auto_create_subnetworks": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"delete_default_routes_on_create": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"description": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"gateway_ipv4": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"mtu": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "other",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"routing_mode": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"self_link": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"google_compute_network_peering": {
				"peering1": {
					0: {
						"applied": {
							"export_custom_routes":                false,
							"export_subnet_routes_with_public_ip": true,
							"import_custom_routes":                false,
							"import_subnet_routes_with_public_ip": null,
							"name":     "peering1",
							"timeouts": null,
						},
						"destroy": false,
						"diff": {
							"export_custom_routes": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"export_subnet_routes_with_public_ip": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"import_custom_routes": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"import_subnet_routes_with_public_ip": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "peering1",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"peer_network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"state": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"state_details": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
				"peering2": {
					0: {
						"applied": {
							"export_custom_routes":                false,
							"export_subnet_routes_with_public_ip": true,
							"import_custom_routes":                false,
							"import_subnet_routes_with_public_ip": null,
							"name":     "peering2",
							"timeouts": null,
						},
						"destroy": false,
						"diff": {
							"export_custom_routes": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"export_subnet_routes_with_public_ip": {
								"computed": false,
								"new":      "true",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"import_custom_routes": {
								"computed": false,
								"new":      "false",
								"old":      "",
							},
							"import_subnet_routes_with_public_ip": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"name": {
								"computed": false,
								"new":      "peering2",
								"old":      "",
							},
							"network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"peer_network": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"state": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"state_details": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
			"random_id": {
				"id": {
					0: {
						"applied": {
							"byte_length": 8,
							"keepers":     null,
							"prefix":      null,
						},
						"destroy": false,
						"diff": {
							"b64_std": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"b64_url": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"byte_length": {
								"computed": false,
								"new":      "8",
								"old":      "",
							},
							"dec": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"hex": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"keepers": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"prefix": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "1.0.8"

variables = {
	"branchname":  "release",
	"name_prefix": "sentinel",
	"project":     "Sumanth5454",
	"region":      "us-east4",
	"zone":        "us-east4-a",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
