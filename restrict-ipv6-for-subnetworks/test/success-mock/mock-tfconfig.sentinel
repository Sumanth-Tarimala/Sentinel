import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"google": {
				"alias": {
					"": {
						"config": {
							"credentials": null,
						},
						"references": {
							"credentials": [],
							"project": [
								"var.project",
							],
							"region": [
								"var.region",
							],
							"zone": [
								"var.zone",
							],
						},
						"version": "",
					},
				},
				"config": {
					"credentials": null,
				},
				"references": {
					"credentials": [],
					"project": [
						"var.project",
					],
					"region": [
						"var.region",
					],
					"zone": [
						"var.zone",
					],
				},
				"version": "",
			},
			"google-beta": {
				"alias": {
					"": {
						"config": {
							"credentials": null,
						},
						"references": {
							"credentials": [],
							"project": [
								"var.project",
							],
							"region": [
								"var.region",
							],
							"zone": [
								"var.zone",
							],
						},
						"version": "",
					},
				},
				"config": {
					"credentials": null,
				},
				"references": {
					"credentials": [],
					"project": [
						"var.project",
					],
					"region": [
						"var.region",
					],
					"zone": [
						"var.zone",
					],
				},
				"version": "",
			},
			"random": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "",
					},
				},
				"config":     {},
				"references": {},
				"version":    "",
			},
		},
		"resources": {
			"google_compute_network": {
				"custom-test": {
					"config": {
						"auto_create_subnetworks": false,
						"name": "ipv6-test-network",
					},
					"provisioners": null,
					"references": {
						"auto_create_subnetworks": [],
						"name": [],
					},
				},
			},
			"google_compute_subnetwork": {
				"subnetwork-ipv6": {
					"config": {
						"ip_cidr_range": "10.0.0.0/22",
						"name":          "ipv6-test-subnetwork",
						"region":        "us-west2",
						"stack_type":    "IPV4_ONLY",
					},
					"provisioners": null,
					"references": {
						"ip_cidr_range": [],
						"name":          [],
						"network": [
							"google_compute_network.custom-test.id",
							"google_compute_network.custom-test",
						],
						"region":     [],
						"stack_type": [],
					},
				},
			},
			"random_id": {
				"id": {
					"config": {
						"byte_length": 8,
					},
					"provisioners": null,
					"references": {
						"byte_length": [],
					},
				},
			},
		},
		"variables": {
			"branchname": {
				"default":     "release",
				"description": "Branch name for testing",
			},
			"name_prefix": {
				"default":     "sentinel",
				"description": "The name prefix for the database instance. Will be appended with a random string. Use lowercase letters, numbers, and hyphens. Start with a letter.",
			},
			"project": {
				"default":     "Sumanth5454",
				"description": "The project ID to host the database in.",
			},
			"region": {
				"default":     "us-east4",
				"description": "The region to host the database in.",
			},
			"zone": {
				"default":     "us-east4-a",
				"description": "The zoneto host the database in.",
			},
		},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
